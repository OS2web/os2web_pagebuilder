<?php

/**
 * @file
 * Install, uninstall and update hooks for box paragraph module.
 */

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\paragraphs\Entity\ParagraphsType;
use Symfony\Component\Yaml\Yaml;
use Drupal\field\Entity\FieldConfig;

/**
 * Reset accordion item paragraph fields.
 */
function os2web_accordion_paragraph_update_8902() {
  $path = drupal_get_path('module', 'os2web_accordion_paragraph');

  // Loading field storage data.
  $field_storage_yml = Yaml::parse(file_get_contents($path . '/config/optional/field.storage.paragraph.field_os2web_accordion_item_ref.yml'));

  // Create field storage.
  if (!FieldStorageConfig::loadByName('paragraph', 'field_os2web_accordion_item_ref')) {
    FieldStorageConfig::create($field_storage_yml)->save();
  }

  // Create field instance.
  $field_os2web_accordion_item_ref_yml = Yaml::parse(file_get_contents($path . '/config/optional/field.field.paragraph.os2web_accordion_item.field_os2web_accordion_item_ref.yml'));
  if (!FieldConfig::loadByName($field_os2web_accordion_item_ref_yml['entity_type'], $field_os2web_accordion_item_ref_yml['bundle'], $field_os2web_accordion_item_ref_yml['field_name'])) {
    FieldConfig::create($field_os2web_accordion_item_ref_yml)->save();
  }

  os2web_pagebuilder_update_entity_from_yml(
    'os2web_accordion_paragraph',
    'core.entity_form_display.paragraph.os2web_accordion_item.default',
    'entity_form_display',
    'paragraph.os2web_accordion_item.default', [
    'field_os2web_accordion_item_ref' => 'content.field_os2web_accordion_item_ref',
    'field_os2web_accordion_item_head' => 'content.field_os2web_accordion_item_head',
  ]);
  os2web_pagebuilder_update_entity_from_yml(
    'os2web_accordion_paragraph',
    'core.entity_view_display.paragraph.os2web_accordion_item.default',
    'entity_view_display',
    'paragraph.os2web_accordion_item.default', [
    'field_os2web_accordion_item_ref' => 'content.field_os2web_accordion_item_ref',
    'field_os2web_accordion_item_head' => 'content.field_os2web_accordion_item_head',
  ]);

}

/**
 * Adding os2web_accordion entity and os2web_accordion_reusable paragraph.
 */
function os2web_accordion_paragraph_update_8903() {
  // Adding custom entity - os2web_accordion.
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type_manager->clearCachedDefinitions();
  $entity_type = $entity_type_manager->getDefinition('os2web_accordion');
  \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);

  drupal_flush_all_caches();

  $path = drupal_get_path('module', 'os2web_accordion_paragraph');

  // Creating paragraph.
  $paragraph_yml = Yaml::parse(file_get_contents($path . '/config/optional/paragraphs.paragraphs_type.os2web_accordion_reusable.yml'));
  if (!ParagraphsType::load('os2web_accordion_reusable')) {
    ParagraphsType::create($paragraph_yml)->save();
  }

  $fields = [
    'field_os2web_accordion_reus_targ',
  ];
  // Add new fields.
  foreach ($fields as $field) {
    // Create field storage.
    $field_storage_yml = Yaml::parse(file_get_contents($path . '/config/optional/field.storage.paragraph.' . $field . '.yml'));
    if (!empty(($field_storage_yml['settings']['allowed_values']))) {
      // Adjusting allowed values options.
      $allowed_values = [];
      foreach ($field_storage_yml['settings']['allowed_values'] as $option) {
        $allowed_values[$option['value']] = $option['label'];
      }
      $field_storage_yml['settings']['allowed_values'] = $allowed_values;
    }
    if (!FieldStorageConfig::loadByName($field_storage_yml['entity_type'], $field_storage_yml['field_name'])) {
      FieldStorageConfig::create($field_storage_yml)->save();
    }
    // Create field instance.
    $field_yml = Yaml::parse(file_get_contents($path . '/config/optional/field.field.paragraph.os2web_accordion_reusable.' . $field . '.yml'));
    if (!FieldConfig::loadByName($field_yml['entity_type'], $field_yml['bundle'], $field_yml['field_name'])) {
      FieldConfig::create($field_yml)->save();
    }
  }

  // Create/update form display.
  $efd_id = 'paragraph.os2web_accordion_reusable.default';
  $efd_yml = Yaml::parse(file_get_contents($path . '/config/optional/core.entity_form_display.' . $efd_id . '.yml'));
  if (!EntityFormDisplay::load($efd_id)) {
    EntityFormDisplay::create($efd_yml)->save();
  }
  else {
    os2web_pagebuilder_update_entity_from_yml(
      'os2web_accordion_paragraph',
      'core.entity_form_display.' . $efd_id,
      'entity_form_display',
      $efd_id, [
      'field_os2web_accordion_reus_targ' => 'content.field_os2web_accordion_reus_targ',
      'hidden' => 'hidden',
    ]);
  }

  // Create/update view display.
  $evd_id = 'paragraph.os2web_accordion_reusable.default';
  $evd_yml = Yaml::parse(file_get_contents($path . '/config/optional/core.entity_view_display.' . $evd_id . '.yml'));
  if (!EntityViewDisplay::load($evd_id)) {
    EntityViewDisplay::create($evd_yml)->save();
  }
  else {
    os2web_pagebuilder_update_entity_from_yml(
      'os2web_accordion_paragraph',
      'core.entity_view_display.' . $evd_id,
      'entity_view_display',
      $evd_id, [
      $field => 'content.' . $field,
      'field_os2web_accordion_reus_targ' => 'content.field_os2web_accordion_reus_targ',
      'hidden' => 'hidden',
    ]);
  }

  // Create/update view display.
  $evd_id = 'paragraph.os2web_accordion_reusable.preview';
  $evd_yml = Yaml::parse(file_get_contents($path . '/config/optional/core.entity_view_display.' . $evd_id . '.yml'));
  if (!EntityViewDisplay::load($evd_id)) {
    EntityViewDisplay::create($evd_yml)->save();
  }
  else {
    os2web_pagebuilder_update_entity_from_yml(
      'os2web_accordion_paragraph',
      'core.entity_view_display.' . $evd_id,
      'entity_view_display',
      $evd_id, [
      $field => 'content.' . $field,
      'field_os2web_accordion_reus_targ' => 'content.field_os2web_accordion_reus_targ',
      'hidden' => 'hidden',
    ]);
  }
}

/**
 * Updating renaming accordion_paragraph_id to accordion_paragraph_ref.
 */
function os2web_accordion_paragraph_update_8904() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $bundle_of = 'os2web_accordion';

  $storage = $entity_type_manager->getStorage($bundle_of);
  $bundle_definition = $entity_type_manager->getDefinition($bundle_of);

  $id_key = $bundle_definition->getKey('id');

  // If there is no data table defined then use the base table.
  $table_name = $storage->getDataTable() ?: $storage->getBaseTable();
  $database = \Drupal::database();
  $definition_manager = \Drupal::entityDefinitionUpdateManager();

  // Store the existing values.
  $field_values = $database->select($table_name)
    ->fields($table_name, [$id_key, 'accordion_paragraph_id__target_id', 'accordion_paragraph_id__target_revision_id'])
    ->execute()
    ->fetchAllAssoc($id_key);

  // Uninstall the field.
  $field_storage_definition = $definition_manager->getFieldStorageDefinition('accordion_paragraph_id', $bundle_of);
  if ($field_storage_definition) {
    $definition_manager->uninstallFieldStorageDefinition($field_storage_definition);
  }

  // Create a new field definition.
  $field_storage_definition = BaseFieldDefinition::create('entity_reference_revisions')
    ->setLabel(t('Accordion paragraph'))
    ->setDescription(t('Accordion paragraph entity.'))
    ->setSetting('target_type', 'paragraph')
    ->setSetting('handler', 'default:paragraph')
    ->setSetting('handler_settings', ['target_bundles' => ['os2web_accordion' => 'os2web_accordion']])
    ->setTranslatable(TRUE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'entity_reference_revisions_entity_view',
      'weight' => 0,
    ])
    ->setDisplayOptions('form', [
      'type' => 'paragraphs',
      'weight' => 0,
    ])
    ->setRequired(TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  // Install the new definition.
  $definition_manager->installFieldStorageDefinition('accordion_paragraph_ref', $bundle_of, $bundle_of, $field_storage_definition);

  // Restore the values.
  foreach ($field_values as $id => $value) {
    $database->update($table_name)
      ->fields([
        'accordion_paragraph_ref__target_id' => $value->accordion_paragraph_id__target_id,
        'accordion_paragraph_ref__target_revision_id' => $value->accordion_paragraph_id__target_revision_id,
      ])
      ->condition($id_key, $id)
      ->execute();
  }
}
