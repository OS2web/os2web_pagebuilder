<?php

/**
 * @file
 * OS2Web gis map paragraph module file.
 */

use Drupal\node\Entity\Node;
use Drupal\views\Views;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\views\ViewExecutable;

// The os2web_page_content view defined in os2web_pagebuilder module
// This view is not restricted to Sektion taxonomy vocabulary.
define('OS2WEB_SECTION_PARAGRAPH_VIEW', 'os2web_page_content');

/**
 * Implements hook_preprocess_HOOK().
 */
function os2web_section_paragraph_preprocess_paragraph(&$variables) {
  if ($variables['view_mode'] == 'preview') {
    return;
  }

  $paragraph = $variables['paragraph'];
  $term_id = NULL;

  if ($paragraph->bundle() == 'os2web_section_paragraph' || $paragraph->bundle() == 'os2web_section_promoted_pages') {
    // Getting the related taxonomy term.
    // This term by default supposed to use Sektion taxonomy vocabulary,
    // But it's not restricted to use another vocabularies on demand.
    $term_id = $paragraph->get('field_os2web_section_par_section')->target_id;
  }

  $child_terms = [];

  // Loading child terms sorted by weight.
  if (!empty($term_id)) {
    $query = \Drupal::entityQuery('taxonomy_term')
      ->accessCheck(false)
      ->condition('parent', $term_id)
      ->sort('weight');

    $child_terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadMultiple($query->execute());
  }

  // Paragraph: os2web_section_paragraph
  if ($paragraph->bundle() == 'os2web_section_paragraph') {
    $list_type = $paragraph->hasField('field_os2web_section_par_type') ? $paragraph->get('field_os2web_section_par_type')->getValue() : NULL;
    if (!empty($list_type[0]['value'])) {
      $list_type = $list_type[0]['value'];
    }

    $view = Views::getView(OS2WEB_SECTION_PARAGRAPH_VIEW);
    if ($list_type == 'child_term_links' || empty($list_type)) {
      $child_term_links = [];

      /** @var \Drupal\taxonomy\TermInterface $child_term */
      foreach ($child_terms as $child_term) {
        $child_term_links[$child_term->id()] = [
          'title' => $child_term->label(),
          'url' => $child_term->toUrl(),
        ];
      }

      $variables['#child_term_links'] = $child_term_links;
    }
    else if ($view || $view->access($list_type)) {
      $variables['#list_type'] = $list_type;
      $variables['content'][] = views_embed_view(OS2WEB_SECTION_PARAGRAPH_VIEW, $list_type, $term_id);
    }
  }

  // Paragraph: os2web_section_promoted_pages
  if ($paragraph->bundle() == 'os2web_section_promoted_pages') {
    $child_terms_links = [];

    /** @var \Drupal\taxonomy\TermInterface $child_term */
    foreach ($child_terms as $child_term) {
      $child_terms_links[$child_term->id()] = [
        'title' => $child_term->label(),
        'url' => $child_term->toUrl(),
      ];

      $node_ids = getSectionPromotedNodes($child_term->id());
      if (!empty($node_ids)) {
        $nodes = Node::loadMultiple($node_ids);

        /** @var \Drupal\node\NodeInterface $node */
        foreach ($nodes as $node) {
          $child_terms_links[$child_term->id()]['promoted_node_links'][$node->id()] = [
            'title' => $node->label(),
            'url' => $node->toUrl(),
          ];
        }
      }
    }

    $variables['#child_term_links'] = $child_terms_links;
  }
}

/**
 * Implements hook_theme().
 */
function os2web_section_paragraph_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__os2web_section_paragraph' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__os2web_section_promoted_pages' => [
      'base hook' => 'paragraph',
    ],
  ];
}

function os2web_section_paragraph_theme_suggestions_paragraph(array $variables) {
  $suggestions = [];
  $paragraph = $variables['elements']['#paragraph'];
  if ($paragraph instanceof ParagraphInterface && $paragraph->bundle() == 'os2web_section_paragraph') {
    $suggestions[] = 'paragraph__os2web_section_paragraph__' . $variables['elements']['#view_mode'] . '__child_term_links';
    $view = Views::getView(OS2WEB_SECTION_PARAGRAPH_VIEW);
    if ($view instanceof ViewExecutable) {
      $displays = os2web_section_paragraph_get_view_displays($view);
      foreach ($displays as $id => $display) {
        $suggestions[] = 'paragraph__os2web_section_paragraph__' . $variables['elements']['#view_mode'] . '__' . $id;
      }
    }
  }
  return $suggestions;
}

/**
 * Customer callback to get allowed values on section paragraph list type.
 */
function os2web_section_paragraph_section_styles_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = NULL) {
  $values = [
    'child_term_links' => t('Undersektionstermer linker')
  ];
  $view = Views::getView(OS2WEB_SECTION_PARAGRAPH_VIEW);
  if (empty($view)) {
    return $values;
  }

  $views_data = \Drupal::service('views.views_data');
  $data = $views_data->get($view->storage->get('base_table'));
  $displays = os2web_section_paragraph_get_view_displays($view);
  foreach ($displays as $id => $display) {
    if ($id == 'default') {
      continue;
    }
    $values[$id] = $data['table']['base']['title'] . ' - ' . $display['display_title'];
  }

  return $values;
}

function os2web_section_paragraph_get_view_displays(ViewExecutable $view) {
  $displays = $view->storage->get('display');
  uasort($displays, function ($a, $b) {
    return ( $a['position'] > $b['position'] ? 1 : -1 );
  });
  return $displays;
}
