<?php

/**
 * @file
 * OS2Web menu links paragraph module file.
 */

use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;

/**
 * Implements hook_preprocess_HOOK().
 */
function os2web_menu_links_paragraph_preprocess_paragraph(&$variables) {
  if ($variables['view_mode'] == 'preview') {
    return;
  }

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->bundle() != 'os2web_menu_links_paragraph') {
    return;
  }

  /** @var \Drupal\Core\Menu\MenuLinkManager $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

  // Shows list of children menu item link
  // if it's referenced node has been marked as promoted page.
  $include_promoted_pages = $paragraph->get('field_os2web_menu_links_inc_pr_p')->value;

  $show_intro_text = $paragraph->hasField('field_os2web_menu_links_show_int') ? $paragraph->get('field_os2web_menu_links_show_int')->value : NULL;

  // Getting menu link fra paragraph settings.
  $menu_link_value = $paragraph->hasField('field_os2web_menu_links_item') ? $paragraph->get('field_os2web_menu_links_item')->value : NULL;
  if (!empty($menu_link_value)) {
    $menu_link_id = str_replace('main:', '', $menu_link_value);
    try {
      $menuLink = $menu_link_manager->createInstance($menu_link_id);
    }
    catch (\Exception $exception) {
      \Drupal::service('messenger')->addWarning($exception->getMessage());
    }
  }

  // Defined view mode for menu items.
  $view_mode = 'default';
  if ($paragraph->hasField('field_os2web_menu_links_vm') && !empty($paragraph->get('field_os2web_menu_links_vm')->value)) {
    $view_mode = $paragraph->get('field_os2web_menu_links_vm')->value;
  }
  $variables['attributes']['class'][] = 'paragraph--menu-link--view-mode--' . $view_mode;

  $menu_links = [];

  $menu_name = 'main';
  $menu_tree = \Drupal::menuTree();
  $parameters = new MenuTreeParameters();

  // For empty menu link using current page menu link.
  if (empty($menuLink)) {
    // Getting a parent node of a paragraph.
    // Also takes care of nested paragraphs.
    $parent = $paragraph->getParentEntity();
    while ($parent instanceof Paragraph) {
      $parent = $parent->getParentEntity();
    }

    $result = $menu_link_manager->loadLinksByRoute('entity.node.canonical', array('node' => $parent->id()));

    // If there is not menu link, don't render anything.
    if (empty($result)) {
      return;
    }

    $menuLink = array_pop($result);
  }

  $parameters->setRoot($menuLink->getPluginId());
  $parameters->setMinDepth(1);
  if (!$include_promoted_pages) {
    $parameters->setMaxDepth(1);
  }
  else {
    // Don't set any limit, as we need the entire tree.
  }

  // Delete comments to have only enabled links.
  $parameters->onlyEnabledLinks();

  $tree = $menu_tree->load($menu_name, $parameters);
  $manipulators = array(
    array('callable' => 'menu.default_tree_manipulators:checkNodeAccess'),
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);

  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
  $entity_type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\Core\Entity\EntityViewBuilderInterface $viewBuilder */
  $menuItemViewBuilder = $entity_type_manager->getViewBuilder('menu_link_content');
  /** @var \Drupal\Core\Entity\EntityViewBuilderInterface $viewBuilder */
  $nodeViewBuilder = $entity_type_manager->getViewBuilder('node');

  /** @var \Drupal\Core\Menu\MenuLinkTreeElement $item */
  foreach ($tree as $item) {
    $children_links = [];
    $child_nids = os2web_menu_links_find_child_nids($item->subtree);

    if (!empty($child_nids)) {
      $query = \Drupal::entityQuery('node');
      $query->condition('status', 1);
      $query->condition('promote', 1);
      $query->condition('type', 'os2web_page');
      $query->condition('nid', $child_nids, 'IN');
      $entity_ids = $query->execute();

      $nodes = Node::loadMultiple($entity_ids);

      if (!empty($nodes)) {
        // Traversing through children keeping their position.
        foreach ($child_nids as $nid) {
          if (isset($nodes[$nid])) {
            $children_links[] = [
              'title' => $nodes[$nid]->label(),
              'url' => $nodes[$nid]->toUrl()
            ];
          }
        }
      }
    }

    $urlObject = $item->link->getUrlObject();
    if (($item->access instanceof AccessResultInterface && $item->access->isAllowed()) || $urlObject->isExternal()) {
      $metadata = $item->link->getMetaData();
      $content = [];
      if (isset($metadata['entity_id'])) {
        $entity = MenuLinkContent::load($metadata['entity_id']);
        $render_output = $menuItemViewBuilder->view($entity, $view_mode);
        // Build the entity view ourselves and unset the #pre_render so that it
        // doesn't run twice later on, when rendered.
        // This gives us access to all fields immediately in the menu template.
        $content = $menuItemViewBuilder->build($render_output);
        array_pop($content['#pre_render']);
      }

      $intro_text = NULL;
      if ($show_intro_text) {
        $params = $item->link->getRouteParameters();
        if (isset($params['node'])) {
          $node = Node::load($params['node']);
          $intro_text = $node->hasField('field_os2web_page_intro') ? $nodeViewBuilder->viewField($node->get('field_os2web_page_intro'), 'full') : NULL;
          $intro_text['#cache']['tags'] = $node->getCacheTags();
        }
      }

      $menu_links[] = [
        'title' => $item->link->getTitle(),
        'url' => $item->link->getUrlObject(),
        'content' => $content,
        'intro_text' => $intro_text,
        'children' => $children_links,
      ];
    }
  }
  $variables['#cache']['contexts'][] = 'route.menu_active_trails:main';
  $variables['#menu_links'] = $menu_links;
}

/**
 * Implements hook_theme().
 */
function os2web_menu_links_paragraph_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__os2web_menu_links_paragraph' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Traverses through the menu subtree and finds all the related nodes..
 *
 * @param $linksTreeElements
 *   Array of \Drupal\Core\Menu\MenuLinkTreeElement[].
 *
 * @return array
 *   Array of nids.
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function os2web_menu_links_find_child_nids($linksTreeElements) {
  $nids = [];

  if (sizeof($linksTreeElements)) {

    /** @var \Drupal\Core\Menu\MenuLinkTreeElement $linkElement */
    foreach ($linksTreeElements as $linkElement) {
      $params = $linkElement->link->getRouteParameters();

      // Adding node id.
      if (isset($params['node'])) {
        $nids[] = $params['node'];
      }

      // If element has tree, traverse through it.
      if (count($linkElement->subtree)) {
        $nids = array_merge($nids, os2web_menu_links_find_child_nids($linkElement->subtree));
      }
    }
  }

  return $nids;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function os2web_menu_links_paragraph_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  $paragraph = $variables['elements']['#paragraph'];
  if (!($paragraph instanceof ParagraphInterface) || $paragraph->bundle() != 'os2web_menu_links_paragraph') {
    return [];
  }

  // Adding suggestion for paragraph with selected view mode.
  $field_os2web_menu_links_vm = $paragraph->get('field_os2web_menu_links_vm')->value;
  if (!empty($field_os2web_menu_links_vm) && is_string($field_os2web_menu_links_vm)) {
    $suggestions[] = 'paragraph__os2web_menu_links_paragraph__' . $variables['elements']['#view_mode'] . '__menu_link_' . $field_os2web_menu_links_vm;
  }

  // Adding suggestion for paragraph with intro text shown.
  $show_intro_text = $paragraph->hasField('field_os2web_menu_links_show_int') ? $paragraph->get('field_os2web_menu_links_show_int')->value : NULL;
  if (!empty($show_intro_text)) {
    $suggestions[] = 'paragraph__os2web_menu_links_paragraph__' . $variables['elements']['#view_mode'] . '__menu_link_with_intro_text';
  }

  // Adding suggestion for paragraph with promoted pages list.
  $include_promoted_pages = $paragraph->hasField('field_os2web_menu_links_inc_pr_p') ? $paragraph->get('field_os2web_menu_links_inc_pr_p')->value : NULL;
  if (!empty($include_promoted_pages)) {
    $suggestions[] = 'paragraph__os2web_menu_links_paragraph__' . $variables['elements']['#view_mode'] . '__menu_link_with_promoted_pages';
  }
}
